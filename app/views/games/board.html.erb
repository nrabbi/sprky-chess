<div class="container-fluid arena">
  <div id="game" class="hidden"> I should be hidden <%= %></div>
  <div class="row game-header" data-winner-id="<%= @winner_id %>">
    <span class="game-name"><%= @current_game.name %></span>
    <br>
    <span id="matchup">
      <% if @black_player != nil && @white_player != nil %>
        <!--Both players-->
      <span><%= @black_player.email %> vs  <%= @white_player.email %></span>
      <% elsif @black_player != nil && @white_player == nil %>
          <span>Waiting for White</span>
      <% elsif @white_player != nil && @black_player == nil %>
          <span>Waiting for Black</span>
      <% end %>
    </span>

    <% if current_player && [ @current_game.player_1_id, @current_game.player_2_id ].include?(current_player.id) %>
        <h4 class="current-player-indicator">You are playing as <%= @current_player_color %></h4>
    <% end %>
  </div>

  <% if @is_in_check %>
      <h2>You are in check!</h2>
  <% end %>

  <div class="row capture-zone" >
    <div class="col-md-4" id="black-capture-zone">
      <% if @black_captured_pieces.count == 0 %>
      <% else %>
          <% @black_captured_pieces.each do |piece| %>
              <span class="pieces"><%= piece.html_icon.html_safe %></span>

          <% end %>
      <% end %>
    </div>
  </div>
  <div id="black-player-info" class="row player-info <%= 'turn' if @player_turn == 'Black' %>">
    <div class="col-md-8">
      <span id="black-turn-bg" class="<%= 'turn-bg' if @player_turn == 'Black'  %>">
        <span id="black-turn"><%= 'Turn - ' if @player_turn == 'Black' %></span>
        <span class="outcome" style="display: none;"></span>

        <span id="black-player">
          <% if @black_player != nil %>
            <%= @black_player.email %>
              <% if @black_player.id == @current_player.id %>
                (you)
            <% end %>
          <% else %>
            <span id="black-awaiting">
              Awaiting Player
            </span>
          <% end %>
        </span>
      </span>
    </div>
  </div>
  <div class="row">
    <div class="col-md-8">
      <div id="chessboard" data-game-id="<%= @current_game.id %>" data-current-player-id="<%= @current_player.id %>"
           data-current-player-email="<%= @current_player.email %>" data-current-player-color="<%=@current_player_color%>"
           data-opposite-player-id="<%= @opposite_player.id %>"
           data-opposite-player-email="<%= @opposite_player.email %>" data-opposite-player-color="<%=@opposite_player_color%>">
        <% col = ["A", "B", "C", "D", "E", "F", "G", "H"]
           row_index = 7
           col_index = 0 %>

        <table>
          <% 8.times do %>
              <tr>
                <% 8.times do %>
                    <td class="square" data-x="<%= col_index %>" data-y="<%= row_index %>">
                      <div><%= col[col_index] + (row_index+1).to_s %></div>
                      <% piece = get_piece_at(col_index, row_index) %>
                      <% if piece %>
                          <div class="pieces"><%= piece.html_icon.html_safe %></div>
                      <% end %>
                    </td>
                    <% col_index += 1 %>

                <% end %>
              </tr>
            <% row_index -= 1 %>
            <% col_index = 0 %>
          <% end %>
        </table>
        <br />
      </div>
    </div>

    <!--  large(> 1024px screens)-->
    <div class="col-md-4 moves-right">
      <% if @game.moves.count > 0 %>
          <h3><span class="moves-count"><%= @game.moves.count %> move<% if @game.moves.count > 1 %>s<% end %></span></h3>
      <% else %>
          <h3 class="no-moves">No moves yet.</h3>
      <% end %>
      <div class="moves-list">
        <ol>
            <% @game.moves.each_with_index do |move, i| %>
              <li>
                <% previous_moves = @game.moves[0..i] %>
                <% moved = previous_moves.select { |old_move| (old_move.from == move.from) && (old_move != move) } %>
                <% if ((move.from - move.to).abs == 2) && move.from == 4 && moved.blank? %>
                  <% if move.to == 2 %>
                    A1 (0, 0) and E1 (4, 0) Castle
                  <% elsif move.to == 6 %>
                    E1 (4, 0) and H1 (0, 7) Castle
                  <% end %>
                <% elsif ((move.from - move.to).abs == 2) && move.from == 60 %>
                  <% if move.to == 58 %>
                    A8 (0, 7) and E8 (4, 7) Castle
                  <% elsif move.to == 62 %>
                    E8 (4, 7) and H8 (7, 7) Castle
                  <% end %>
                <% else %>
                  <% position = Position.new_from_int(move.from) %>
                  From: <%= position.to_chess_position %> (<%= position.x %>, <%= position.y %>)
                  <%  position = Position.new_from_int(move.to) %>
                  To: <%= position.to_chess_position %> (<%= position.x %>, <%= position.y %>)
                <% end %>
              </li>
          <% end %>
        </ol>
      </div>
    </div>
  </div>
  <div id="white-player-info" class="row player-info <%= 'turn' if @player_turn == 'White' %>">
    <div class="col-md-8">
      <span id="white-turn-bg" class="<%= 'turn-bg' if @player_turn == 'White'  %>">
        <span id="white-turn"><%= 'Turn - ' if @player_turn == 'White' %></span>
        <span class="outcome" style="display: none;"></span>
        <span id="white-player">
          <% if @white_player != nil %>
            <%= @white_player.email %>
              <% if @white_player.id == @current_player.id %>
              (you)
            <% end %>
          <% else %>
            <span id="white-awaiting">
              Awaiting Player
            </span>
          <% end %>
        </span>
      </span>
    </div>
  </div>
  <div class="row capture-zone">
    <div class="col-md-4" id="white-capture-zone">
      <% if @white_captured_pieces.count == 0 %>
      <% else %>
          <% @white_captured_pieces.each do |piece| %>
              <span class="pieces"><%= piece.html_icon.html_safe %></span>
          <% end %>
      <% end %>
    </div>
  </div>
  <!-- Medium(< 1024px screens -->
  <div class="row moves-bottom">
    <div class="col-md-5">
      <% if @game.moves.count > 0 %>
          <h3><span class="moves-count"><%= @game.moves.count %> move<% if @game.moves.count > 1 %>s<% end %></span></h3>
      <% else %>
          <h3 class="no-moves">No moves yet.</h3>
      <% end %>
      <div class="moves-list">
        <ol>
          <% @game.moves.each do |move| %>
              <li>
                <%  position = Position.new_from_int(move.from) %>
                From: <%= position.to_chess_position %> (<%= position.x %>, <%= position.y %>)
                <%  position = Position.new_from_int(move.to) %>
                To: <%= position.to_chess_position %> (<%= position.x %>, <%= position.y %>)
              </li>
          <% end %>
        </ol>
      </div>
    </div>
  </div>

</div>
<br />
<br />
<br />

</div>

</div>

<script>

  //  Append piece to square and move occupying piece to capture zone if present
  function movePiece(move, color) {
    var from = toCoords(move.from);
    var fromSq = getSquare(from);
    var fromPiece = getPiece(fromSq);

    var to = toCoords(move.to);
    var toSq = getSquare(to);
    var toPiece = toSq.children('.pieces').first();
    // Move Rook to Castle position if castle move
    if(castleMove(move, color)){
      console.log('castle move', castleMove)

      var rookTo = getRookTo(move.to);
      var rookFrom = getRookFrom(move.to);
      var rookFromSq = getSquare(rookFrom);
      var rookToSq = getSquare(rookTo);
      var rookPiece = getPiece(rookFromSq);

      rookToSq.append(rookPiece);
    } else if(toPiece.length){
      console.log('CAPTURE PIECE!', toPiece);
      moveToCapture(toPiece, color);
    }
    toSq.append(fromPiece);
  }

  //  Toggle turn indication
  function changeTurn(moveColor) {
    if(moveColor.toUpperCase() === "BLACK"){
      $('.turn-bg').removeClass('turn-bg');
      $('#white-turn-bg').addClass('turn-bg');
      //  Switch black to white
      $('#white-turn').html('Turn - ');
      $('#black-turn').html('');
      $('#white-player-info').addClass('turn');
      $('#black-player-info').removeClass('turn');
    }else{
      $('.turn-bg').removeClass('turn-bg');
      $('#black-turn-bg').addClass('turn-bg');
      //  Switch white to black
      $('#black-turn').html('Turn - ');
      $('#white-turn').html('');
      $('#black-player-info').addClass('turn');
      $('#white-player-info').removeClass('turn');
    }
  }

  //  Append move text to moves list and increment move count
  function addToList(data) {
    var move = data.move;

    var from = toCoords(move.from);
    var to = toCoords(move.to);
    var message = data.message;
    // make conditional case for castle move here
    if(message.includes("castled" && "A1")){
      var li = '<li>A1 (0, 0) and E1 (4, 0) Castle</li>';
    }else if(message.includes("castled" && "H1")){
      var li = '<li>E1 (4, 0) and H1 (0, 7) Castle</li>';
    }else if(message.includes("castled" && "A8")){
      var li = '<li>A8 (0, 7) and E8 (4, 7) Castle</li>';
    }else if(message.includes("castled" && "H8")){
      var li = '<li>E8 (4, 7) and H8 (7, 7) Castle</li>';
    }else {
      var li = '<li>' + 'From: ' + data.from_letter + ' (' + from.x + ', ' +  from.y + ') ' +
    'To: ' + data.to_letter + ' (' + to.x + ', ' +  to.y + ')' + '</li>';
    }
    $('.moves-list ol').append($(li));
    var movesCountElem = $('.moves-count');
    var count = 0;
    if(movesCountElem.length){
      count = parseInt(movesCountElem.html());
      count++;
      if(count > 1) {
        movesCountElem.html(count + " moves");
      }else{
        movesCountElem.html(count + " move");
      }
    }else{
      var noMovesElem = $('.no-moves');
      noMovesElem.html("<span class='moves-count'>1 move</span>")
    }
  }

  //  Get td element in chessboard
  function getSquare(pos){
    console.log('getSquare', pos);
    return $("td[data-x='" + pos.x +"'][data-y='" + pos.y + "']");
  }

  //  Get piece element
  function getPiece(square){
    return square.children('.pieces').first();
  }

  //  Append piece to capture zone
  function moveToCapture(piece, color){
    var spanPiece = '<span class="pieces">' + piece.html() + '</span>';
    piece.remove();
    if(color.toUpperCase() === "WHITE"){
      $(spanPiece).appendTo($('#white-capture-zone'));
    }else{
      $(spanPiece).appendTo($('#black-capture-zone'));
    }
    toastr.info('Piece Captured!');
  }



  //  Indicate winner and disable chessboard
  function endGame(winnerColor, winnerEmail) {
    /*  Game header */
    var message = winnerEmail + " (" + winnerColor + ")" + " has won";
    toastr.info(message);
    $('.current-player-indicator').remove();
    $('#matchup').append('<h4>' + message + '</h4>');

    /*  Disable chessboard */
    $('.square').unbind();
    $('.square').click(function(ev){
      toastr.error("The game is over")
    });

    /*  Turn indication becomes Winner indication */
    $('.turn-bg').removeClass('turn-bg');
    $('.turn').removeClass('turn');
    $('#white-turn').remove();
    $('#black-turn').remove();
    $('.player-info').css('color', 'black');

    var black = $('#black-player-info').find('.outcome');
    var white = $('#white-player-info').find('.outcome');
    if(winnerColor.toUpperCase() === "BLACK"){
      black.html('WINNER - ');
      white.html('LOSER - ');
      black.css({display: 'inline-block', color: 'green'});
      white.css({display: 'inline-block', color: 'red'});
    }else{
      white.html('WINNER - ');
      black.html('LOSER - ');
      white.css({display: 'inline-block', color: 'green'});
      black.css({display: 'inline-block', color: 'red'});
    }
  }

  $(document).ready(function(){
    //    Show toast on flash message existence
    if($('.alert').length){
      //  Get message and show
      var elem = $('.alert').first().clone();
      elem.find('button:first').remove();
      toastr.info(elem.text());
      //  Don't show flash
      $('.alert').first().remove();
    }
    var gameId = $('#chessboard').data('game-id');
    var currentPlayerId = $('#chessboard').data('current-player-id');
    var currentPlayerEmail = $('#chessboard').data('current-player-email');
    var currentPlayerColor = $('#chessboard').data('current-player-color');
    var oppositePlayerId = $('#chessboard').data('opposite-player-id');
    var oppositePlayerEmail = $('#chessboard').data('opposite-player-email');
    var oppositePlayerColor = $('#chessboard').data('opposite-player-color');
    var from, to;

    /*
     Action cable
     Subscribe to game updates
     */
    if (App.cable.subscriptions['subscriptions'].length > 1) {
      App.cable.subscriptions.remove(App.cable.subscriptions['subscriptions'][1])
    };
    App.game = App.cable.subscriptions.create({channel:'GameChannel', room: gameId}, {
      connected: function(data){
        console.log("Connected to channel");
      },
      disconnected: function(data){
        console.log("Disconnected from channel");
      },
      received: function(data) {
        console.log("Received", data);
        if(data.event) {
          switch(data.event) {
            case "MOVE_CREATED" :
              movePiece(data.move, data.color);
              addToList(data);
              changeTurn(data.color);
              toastr.success(data.message);
              if(data.checkmate){
                toastr.info("CHECKMATE!");
                endGame(data.color, data.player.email);
              } else if(data.check){
                toastr.info("CHECK!");
              }
              break;
            case "MOVE_INVALID": case "NOT_ALLOWED":
            //  Don't show failed attempt to other player
            if(data.player.id === currentPlayerId){
              toastr.error(data.message);
            }
            break;
            case "JOINED_GAME":
              if(data.player.id !== currentPlayerId){
                toastr.info(data.message);
                joinGame(data.player, data.color, currentPlayerEmail);
              }
              break;
          }
        }
      }
    });



    /*
     * Movement logic
     * */
    var selectedCount = 0;
    var onSquareClick = function(ev){
      var square = $(this);
      selectedCount++;
      // 1st or 2nd Selection?
      if(selectedCount == 2){
        //  2nd. Post move
        square.addClass('selected');
        to =  integerConversion(square.data('x'), square.data('y'));

        /*  Post to move#create  */
        var payload = {
          move: {
            game_id: gameId,
            from: from,
            to: to
          }
        };
        $.post('/games/' + gameId + "/moves", payload).success(function(data){
          console.log("Post result", data);
          $('.selected').removeClass('selected');
        });
        selectedCount = 0;

      }else{
        //  1st. Make sure square contains piece
        if(square.find('.pieces').length != 0){
          square.addClass('selected');
          from = integerConversion(square.data('x'), square.data('y'));
        }else{
          toastr.error('Select a piece!');
          selectedCount = 0;
        }
      }
    };

    $('.square').click(onSquareClick);

    //  Check if winner
    function checkWinner(){
      var winnerId = $('.game-header').data('winner-id');
      if(winnerId && winnerId === currentPlayerId){
        endGame(currentPlayerColor, currentPlayerEmail);
      }else if(winnerId && winnerId === oppositePlayerId){
        endGame(oppositePlayerColor, oppositePlayerEmail);
      }
    }
    checkWinner();

    //  Update player info and matchup
    function joinGame(player, color, currentPlayerEmail){
      if(color.toUpperCase() === "BLACK"){
        $('#black-player').html(player.email);
        $('#black-awaiting').html('');
      }else{
        $('#white-turn').html("Turn - ");
        $('#white-player').html(player.email);
        $('#white-awaiting').html('')
      }
      $('#matchup').html(player.email + " vs " + currentPlayerEmail);
    }

  });
     

  function integerConversion(x, y){
    console.log(y);
    return (y * 8) + x;
  }

  function toCoords(positionInt){
    return{
      x: positionInt % 8,
      y: Math.floor(positionInt / 8)
    }
  }

  function getRookTo(kingToInt){
    if(kingToInt === 2){
      return{
      x: 3,
      y: 0
      };
    }else if(kingToInt === 6){
      return{
      x: 5,
      y: 0
      };
    }else if(kingToInt === 58){
      return{
      x: 3,
      y: 7
      };
    }else if(kingToInt === 62){
      return{
      x: 5,
      y: 7
      };
    }
  }
  function getRookFrom(kingToInt){
    if(kingToInt === 2){
      return{
      x: 0,
      y: 0
      };
    }else if(kingToInt === 6){
      return{
      x: 7,
      y: 0
      };
    }else if(kingToInt === 58){
      return{
      x: 0,
      y: 7
      };
    }else if(kingToInt === 62){
      return{
      x: 7,
      y: 7
      };
    }
  }

  function castleMove(move, color){
    var from = toCoords(move.from);
    var to = toCoords(move.to);
    var fromSq = getSquare(from);
    var fromPiece = getPiece(fromSq);
    var distanceInt = Math.abs(from.x - to.x);
    var pieceText = fromPiece[0].childNodes[0].textContent;
    if((distanceInt === 2) && (pieceText === "♔") || (pieceText === "♚")){
      return true;
    }else{
      return false;
    }
  }

</script>
